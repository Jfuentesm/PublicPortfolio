# docker-compose.yaml
services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    ports:
      - "${WEB_PORT:-8001}:8000"
    volumes:
      # - ./app:/app          # Keep commented out unless backend hot-reloading is needed
      - ./data:/data
    # --- ADDED env_file ---
    env_file:
      - .env # Tells Docker Compose to load variables from the .env file in the context root
    # --- END ADDED env_file ---
    environment:
      # You can keep these if they are specific overrides or not in .env
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/vendor_classification
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
      # Note: Variables defined here in 'environment' will OVERRIDE those in .env if they have the same name.
      # It's generally better to define DATABASE_URL, REDIS_URL etc. in .env as well
      # and remove them from here unless you specifically need to override.
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    command: sh -c "echo '>>> [Web CMD Start] Waiting briefly for DB...' && sleep 5 && echo '>>> [Web CMD Start] Running DB Initialization...' && python core/initialize_db.py && echo '>>> [Web CMD Start] Starting Uvicorn...' && uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    volumes:
      # - ./app:/app # Keep commented out unless worker hot-reloading is needed
      - ./data:/data
    # --- ADDED env_file ---
    env_file:
      - .env # Tells Docker Compose to load variables from the .env file in the context root
    # --- END ADDED env_file ---
    environment:
      # Same note as above: prefer defining these in .env and removing from here
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/vendor_classification
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=vendor_classification
    ports:
      - "5433:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d vendor_classification"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: